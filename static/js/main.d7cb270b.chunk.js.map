{"version":3,"sources":["constants.js","components/NumberViewer.jsx","components/MinesweeperHeader.jsx","components/Cell.jsx","components/MinesweeperMap.jsx","components/getNewGrid.js","components/Minesweeper.jsx","hooks/useTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["gameStatuses","NumberViewer","props","className","value","MinesweeperHeader","minesLeft","GameStatus","status","gameStatus","onClickHandler","resetHandler","isClicking","timer","onClick","Cell","cell","data","isCovered","number","isMine","neighboringMines","mine","content","flagged","clickedMine","handleLeftClick","onContextMenu","e","handleRightClick","MinesweeperMap","useState","grid","setGrid","refresh","setRefresh","preventDefault","cellGotClicked","x","y","gameOver","newGrid","map","r","c","hasWon","setGameEnd","cellGotFlagged","reduce","a","queue","k","length","width","n","l","shift","i","Math","max","min","j","push","setTimeout","uncoverEmptyGrid","getNewGrid","minesCount","mines","calcNneighboringMines","count","setneighboringMines","m","rand","floor","random","i1","j1","randomize","addMines","getNewCells","Minesweeper","setMinesLeft","setGameStatus","setIsClicking","isActive","reset","setTimer","useEffect","interval","clearTimeout","useTimer","onMouseDown","onMouseUp","onMouseLeave","height","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.d7cb270b.chunk.js","sourcesContent":["\nexport const gameStatuses = {\n    notStarted: \"notStarted\",\n    running: \"running\",\n    won: \"won\",\n    lost: \"lost\"\n}\n","import React from 'react';\nimport './NumberViewer.component.css';\n\n\nexport function NumberViewer(props) {\n    return (<button className=\"digital-number\">{props.value}</button>);\n}\n\nexport default NumberViewer;","import React from 'react';\nimport { gameStatuses } from '../constants';\nimport { NumberViewer } from './NumberViewer';\n\nexport function MinesweeperHeader(props) {\n    return (\n        <div>\n            <NumberViewer value={props.minesLeft} />\n            <GameStatus status={props.gameStatus} onClickHandler={props.resetHandler} isClicking={props.isClicking} />       \n            <NumberViewer value={props.timer} />\n        </div>\n    );\n}\n\nexport default MinesweeperHeader;\n\nexport function GameStatus(props) {\n    function getStatusEmoji(status) {\n        if (status === gameStatuses.lost) {\n            return 'ðŸ˜ž';\n        } else if (status === gameStatuses.won) {\n            return 'ðŸ˜Ž';\n        } else {\n            return 'ðŸ˜Š'\n        }\n    }\n\n    return (\n        <button onClick={props.onClickHandler}>\n            { props.isClicking ? 'ðŸ˜²' : getStatusEmoji(props.status) }\n        </button>\n    );\n}\n","import React from 'react';\n\n\nexport function Cell(props) {\n    const cell = props.data.isCovered ? 'cell' : 'uncovered-cell';\n    const number = !props.data.isCovered && !props.isMine ? `cell-${props.data.neighboringMines}` : '';\n    const mine = !props.data.isCovered && props.isMine ? 'cell-mine' : '';\n    const content = props.data.isCovered ? \n        (props.data.flagged ? 'ðŸš©' : '') : (props.data.isMine ? 'ðŸ’£' : props.data.neighboringMines > 0 ? props.data.neighboringMines : ''); \n    const clickedMine = props.data.clickedMine ? 'clicked-mine' : ''\n\n    return (\n        <button \n            className={`${cell} ${number} ${mine} ${clickedMine}`}\n            onClick={() => props.handleLeftClick(props.data)}\n            onContextMenu={(e) =>props.handleRightClick(props.data, e)}>\n                { content }\n        </button>\n    );\n}\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport { Cell } from './Cell';\nimport { gameStatuses } from '../constants';\n\n\nexport function MinesweeperMap(props) {\n    const [grid, setGrid] = useState(props.grid);\n    const [refresh, setRefresh] = useState(props.refresh);\n\n    if(refresh !== props.refresh) {\n        setRefresh(props.refresh);\n        setGrid(props.grid);\n    }\n\n    function handleRightClick(cell, e) {\n        e.preventDefault();\n        props.cellGotClicked();\n\n        const [x, y] = [cell.x, cell.y];\n\n        if (!grid[x][y].isCovered || props.gameOver)\n            return;\n\n        const newGrid = grid.map(r => r.map(c => ({...c})));\n\n        newGrid[x][y].flagged = !newGrid[x][y].flagged;\n        \n        if(hasWon(newGrid)) {\n            props.setGameEnd(gameStatuses.won);\n        }\n\n        setGrid(newGrid);\n        props.cellGotFlagged(newGrid[x][y].flagged);\n    }\n\n    const hasWon = (grid) => grid.reduce((a, r) => a && r.reduce((a, c) => a && ((c.isMine && c.flagged) || !c.isCovered), true), true);\n\n    function handleLeftClick(cell) {\n        const [x, y] = [cell.x, cell.y];\n        props.cellGotClicked();\n\n        if (!grid[x][y].isCovered || grid[x][y].flagged || props.gameOver)\n            return;\n\n        if (grid[x][y].isMine) {\n            const newGrid = grid.map(r => r.map(c => ({\n                ...c,\n                isCovered: c.isMine ? false : c.isCovered\n            })));\n            newGrid[x][y].clickedMine = true;\n\n            setGrid(newGrid);\n            props.setGameEnd(gameStatuses.lost);\n        }\n        else  {\n            const newGrid = grid.map(r => r.map(c => ({\n                ...c\n            })));\n            newGrid[x][y].isCovered = false;\n            \n            if (grid[x][y].neighboringMines === 0) {\n                uncoverEmptyGrid(newGrid, cell);\n            }\n            else {\n                setGrid(newGrid);\n            }\n\n            if(hasWon(newGrid)) {\n                props.setGameEnd(gameStatuses.won);\n            }\n        }\n    }\n\n    // BFS\n    function uncoverEmptyGrid(grid, cell) {\n        const queue = [[cell.x, cell.y]];\n        let k = 0;\n        const length = grid.length;\n        const width = grid[0].length;\n\n        while (queue.length > 0) {\n            const n = queue.length;\n            for (let l = 0; l < n; l++) {\n                const [x, y] = queue.shift();\n\n                for (let i = Math.max(0, x - 1); i < Math.min(length, x + 2); ++i) {\n                    for (let j = Math.max(0, y - 1); j < Math.min(width, y + 2); ++j) {\n                        if (!grid[i][j].isMine && grid[i][j].isCovered && !grid[i][j].flagged) {\n                            grid[i][j].isCovered = false;\n                            if(grid[i][j].neighboringMines === 0) {\n                                queue.push([i, j]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // update after each breadth search cycle for animation\n            setTimeout((newGrid) => {\n                setGrid(newGrid);\n            }, k++ * 50, grid);\n        }\n    }\n\n    return (\n        grid.map((r, i) => <div key={i} className=\"row\">\n            {r.map((c, j) => <Cell\n                key={j}\n                data={c}\n                handleLeftClick={handleLeftClick}\n                handleRightClick={handleRightClick} />)}\n        </div>\n        )\n    );\n}\n","export function getNewGrid(length, width, minesCount) {\n\n    function getNewCells(length, width) {\n        let grid = [];\n        for (var i = 0; i < length; i++) {\n            grid[i] = [];\n            for (var j = 0; j < width; j++) {\n                grid[i][j] = {\n                    isMine: false\n                };\n            }\n        }\n\n        return grid;\n    }\n\n    function addMines(grid, minesCount) {\n        for (var i = 0; i < grid.length && minesCount; ++i) {\n            for (var j = 0; j < grid[i].length && minesCount; ++j, --minesCount) {\n                grid[i][j] = {\n                    isMine: true\n                };\n            }\n        }\n\n        return grid;\n    }\n\n    function randomize(grid) {\n        const n = grid.length;\n        const m = grid[0].length;\n        for (let i = 0; i < n; ++i) {\n            for (let j = 0; j < m; ++j) {\n                const rand = Math.floor(Math.random() * n * m);\n                const i1 = Math.floor(rand / m);\n                const j1 = rand % m;\n                [grid[i][j], grid[i1][j1]] = [grid[i1][j1], grid[i][j]];\n            }\n        }\n\n        return grid;\n    }\n\n    function setneighboringMines(mines) {\n\n        function calcNneighboringMines(x, y) {\n            var count = 0;\n\n            for (var i = Math.max(0, x - 1); i < Math.min(mines.length, x + 2); ++i) {\n                for (var j = Math.max(0, y - 1); j < Math.min(mines[i].length, y + 2); ++j) {\n                    if (mines[i][j].isMine) {\n                        count++;\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        for (var i = 0; i < mines.length; ++i) {\n            for (var j = 0; j < mines[i].length; ++j) {\n                mines[i][j].neighboringMines = calcNneighboringMines(i, j);\n            }\n        }\n\n        return mines;\n    }\n\n    return setneighboringMines(randomize(addMines(getNewCells(length, width), minesCount)))\n        .map((r, i) => r.map((c, j) => ({\n            isCovered: true,\n            isMine: c.isMine,\n            neighboringMines: c.neighboringMines,\n            x: i,\n            y: j,\n        })));\n}\n","import React, { useState } from 'react';\nimport { MinesweeperHeader } from './MinesweeperHeader';\nimport './Cell.component.css';\nimport './NumberViewer.component.css';\nimport { MinesweeperMap } from './MinesweeperMap';\nimport { getNewGrid } from './getNewGrid';\nimport { gameStatuses } from '../constants';\nimport { useTimer } from '../hooks/useTimer';\n\n\nfunction Minesweeper(props) {\n    const height = 20; // const [height, setHeight] = useState(20);\n    const width = 20;// const [width, setWidth] = useState(20);\n    const minesCount = 40;\n\n    const [minesLeft, setMinesLeft] = useState(minesCount);\n    const [gameStatus, setGameStatus] = useState(gameStatuses.notStarted);\n    const [grid, setGrid] = useState(getNewGrid(height, width, minesCount));\n    const [refresh, setRefresh] = useState(false);\n    const [isClicking, setIsClicking] = useState(false);\n\n    const timer = useTimer(gameStatus === gameStatuses.running, gameStatus === gameStatuses.notStarted);\n    \n    const isGameOver = () => gameStatus === gameStatuses.won || gameStatus === gameStatuses.lost;\n\n    function cellGotFlagged(flagged) {\n        if(flagged) {\n            setMinesLeft(minesLeft-1);\n        }\n        else {\n            setMinesLeft(minesLeft+1);\n        }\n    }\n    \n    function cellGotClicked() {\n        if(gameStatus === gameStatuses.notStarted) {\n            setGameStatus(gameStatuses.running);\n        }\n    }\n\n    function reset() {\n        setGameStatus(gameStatuses.notStarted);\n        setGrid(getNewGrid(height, width, minesCount));\n        setMinesLeft(minesCount);\n        setRefresh(!refresh);\n    }\n\n    function setGameEnd(status) {\n        setGameStatus(status);\n    }\n\n\n    return (\n        <div className=\"minesweeper\">\n            <div>\n                <MinesweeperHeader minesLeft={minesLeft} timer={timer} gameStatus={gameStatus} isClicking={isClicking} resetHandler={reset} />\n            </div>\n            <div onMouseDown={() => setIsClicking(true)} onMouseUp={() => setIsClicking(false)} onMouseLeave={() => setIsClicking(false)}>\n                <MinesweeperMap\n                    refresh={refresh}\n                    grid={grid}\n                    height={height}\n                    width={width}\n                    minesCount={minesCount}\n                    gameOver={isGameOver()}\n                    cellGotFlagged={cellGotFlagged}\n                    cellGotClicked={cellGotClicked}\n                    setGameEnd={setGameEnd} />\n            </div>\n        </div>\n    );\n}\n\nexport default Minesweeper;\n","import { useState, useEffect } from 'react';\n\nexport function useTimer(isActive, reset) {\n    const [timer, setTimer] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && !interval) {\n            interval = setTimeout(() => {\n                setTimer(timer => timer + 1);\n            }, 1000);\n        } else if (interval) {\n            clearTimeout(interval);\n        }\n\n        if (reset) {\n            setTimer(0);\n        }\n\n        return () => clearTimeout(interval);\n    }, [timer, isActive, reset]);\n\n    return timer;\n}\n","// import logo from './logo.svg';\nimport './App.css';\nimport Minesweeper from './components/Minesweeper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minesweeper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}