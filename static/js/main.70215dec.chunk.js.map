{"version":3,"sources":["constants.js","components/DigitalCounter.jsx","components/Scoreboard.jsx","components/Cell.jsx","components/MinesweeperGrid.jsx","components/getNewGrid.js","components/Minesweeper.jsx","hooks/useTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["gameStatuses","levels","id","text","height","width","minesCount","DigitalCounter","props","str","value","className","padStart","Scoreboard","minesLeft","onChange","e","levelChangeHandler","target","level","map","l","GameStatus","status","gameStatus","onClickHandler","resetHandler","isClicking","timer","onClick","Cell","cell","data","isCovered","number","isMine","neighboringMines","mine","content","flagged","clickedMine","handleLeftClick","onContextMenu","handleRightClick","MinesweeperGrid","useState","grid","setGrid","refresh","setRefresh","preventDefault","cellGotClicked","x","y","gameOver","newGrid","r","c","hasWon","setGameEnd","cellGotFlagged","reduce","a","queue","k","length","n","shift","i","Math","max","min","j","push","setTimeout","uncoverEmptyGrid","flagsSetGrid","getNewGrid","mines","calcNneighboringMines","count","setneighboringMines","m","rand","floor","random","i1","j1","randomize","addMines","getNewCells","Minesweeper","setLevel","setMinesLeft","setGameStatus","setIsClicking","isActive","reset","setTimer","useEffect","interval","clearTimeout","useTimer","newLevelId","onMouseDown","onMouseUp","onMouseLeave","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"oRACaA,EACG,aADHA,EAEA,UAFAA,EAGJ,MAHIA,EAIH,OAGGC,EAAS,CAClB,CAAEC,GAAI,EAAGC,KAAM,WAAYC,OAAQ,GAAIC,MAAO,GAAIC,WAAY,IAC9D,CAAEJ,GAAI,EAAGC,KAAM,eAAgBC,OAAQ,GAAIC,MAAO,GAAIC,WAAY,IAClE,CAAEJ,GAAI,EAAGC,KAAM,SAAUC,OAAQ,GAAIC,MAAO,GAAIC,WAAY,M,MCPzD,SAASC,EAAeC,GAC3B,IAAMC,EAAM,GAAKD,EAAME,MACvB,OAAQ,qBAAKC,UAAU,kBAAf,SAAkCF,EAAIG,SAAS,EAAG,OCAvD,SAASC,EAAWL,GACvB,OACI,sBAAKG,UAAU,aAAf,UACI,cAACJ,EAAD,CAAgBG,MAAOF,EAAMM,YAC7B,gCACI,qBAAKH,UAAU,cAAf,SACI,wBAAQI,SAAU,SAACC,GAAD,OAAOR,EAAMS,mBAAmBD,EAAEE,OAAOR,QAAQA,MAAOF,EAAMW,MAAhF,SACMlB,EAAOmB,KAAI,SAAAC,GAAC,OAAK,yBAAmBX,MAAOW,EAAEnB,GAA5B,cAAkCmB,EAAElB,KAApC,MAAakB,EAAEnB,WAG1C,cAACoB,EAAD,CAAYC,OAAQf,EAAMgB,WAAYC,eAAgBjB,EAAMkB,aAAcC,WAAYnB,EAAMmB,gBAEhG,cAACpB,EAAD,CAAgBG,MAAOF,EAAMoB,WAOlC,SAASN,EAAWd,GAWvB,OACI,wBAAQG,UAAU,QAAQkB,QAASrB,EAAMiB,eAAzC,SACMjB,EAAMmB,WAAa,gBAZLJ,EAY2Bf,EAAMe,OAXjDA,IAAWvB,EACJ,eACAuB,IAAWvB,EACX,eAEA,kBANf,IAAwBuB,E,uBCvBrB,SAASO,EAAKtB,GACjB,IAAMuB,EAAOvB,EAAMwB,KAAKC,UAAY,OAAS,iBACvCC,EAAU1B,EAAMwB,KAAKC,WAAczB,EAAM2B,OAAiD,GAAjF,eAAiD3B,EAAMwB,KAAKI,kBACrEC,GAAQ7B,EAAMwB,KAAKC,WAAazB,EAAM2B,OAAS,YAAc,GAC7DG,EAAU9B,EAAMwB,KAAKC,UACtBzB,EAAMwB,KAAKO,QAAU,eAAO,GAAO/B,EAAMwB,KAAKG,OAAS,eAAO3B,EAAMwB,KAAKI,iBAAmB,EAAI5B,EAAMwB,KAAKI,iBAAmB,GAC7HI,EAAchC,EAAMwB,KAAKQ,YAAc,eAAiB,GAE9D,OACI,wBACI7B,UAAS,UAAKoB,EAAL,YAAaG,EAAb,YAAuBG,EAAvB,YAA+BG,GACxCX,QAAS,kBAAMrB,EAAMiC,gBAAgBjC,EAAMwB,OAC3CU,cAAe,SAAC1B,GAAD,OAAMR,EAAMmC,iBAAiBnC,EAAMwB,KAAMhB,IAH5D,SAIUsB,ICXX,SAASM,EAAgBpC,GAAQ,IAAD,EACXqC,mBAASrC,EAAMsC,MADJ,mBAC5BA,EAD4B,KACtBC,EADsB,OAELF,mBAASrC,EAAMwC,SAFV,mBAE5BA,EAF4B,KAEnBC,EAFmB,KASnC,SAASN,EAAiBZ,EAAMf,GAC5BA,EAAEkC,iBACF1C,EAAM2C,iBAFyB,MAIhB,CAACpB,EAAKqB,EAAGrB,EAAKsB,GAAtBD,EAJwB,KAIrBC,EAJqB,KAM/B,GAAKP,EAAKM,GAAGC,GAAGpB,YAAazB,EAAM8C,SAAnC,CAGA,IAAMC,EAAUT,EAAK1B,KAAI,SAAAoC,GAAC,OAAIA,EAAEpC,KAAI,SAAAqC,GAAC,sBAASA,SAE9CF,EAAQH,GAAGC,GAAGd,SAAWgB,EAAQH,GAAGC,GAAGd,QAEpCmB,EAAOH,IACN/C,EAAMmD,WAAW3D,GAGrB+C,EAAQQ,GACR/C,EAAMoD,eAAeL,EAAQH,GAAGC,GAAGd,UAvBpCS,IAAYxC,EAAMwC,UACjBC,EAAWzC,EAAMwC,SACjBD,EAAQvC,EAAMsC,OAwBlB,IAAMY,EAAS,SAACZ,GAAD,OAAUA,EAAKe,QAAO,SAACC,EAAGN,GAAJ,OAAUM,GAAKN,EAAEK,QAAO,SAACC,EAAGL,GAAJ,OAAUK,IAAML,EAAEtB,SAAWsB,EAAExB,cAAY,MAAO,IAE/G,SAASQ,EAAgBV,GAAO,IAAD,EACZ,CAACA,EAAKqB,EAAGrB,EAAKsB,GAAtBD,EADoB,KACjBC,EADiB,KAI3B,GAFA7C,EAAM2C,iBAEDL,EAAKM,GAAGC,GAAGpB,YAAaa,EAAKM,GAAGC,GAAGd,UAAW/B,EAAM8C,SAGzD,GAAIR,EAAKM,GAAGC,GAAGlB,OAAQ,CACnB,IAAMoB,EAAUT,EAAK1B,KAAI,SAAAoC,GAAC,OAAIA,EAAEpC,KAAI,SAAAqC,GAAC,kCAC9BA,GAD8B,IAEjCxB,WAAWwB,EAAEtB,QAAiBsB,EAAExB,kBAEpCsB,EAAQH,GAAGC,GAAGb,aAAc,EAE5BO,EAAQQ,GACR/C,EAAMmD,WAAW3D,OAEf,CACF,IAAMuD,EAAUT,EAAK1B,KAAI,SAAAoC,GAAC,OAAIA,EAAEpC,KAAI,SAAAqC,GAAC,sBAC9BA,SAWP,GATAF,EAAQH,GAAGC,GAAGpB,WAAY,EAEU,IAAhCa,EAAKM,GAAGC,GAAGjB,iBAoBvB,SAA0BU,EAAMf,GAC5B,IAAMgC,EAAQ,CAAC,CAAChC,EAAKqB,EAAGrB,EAAKsB,IACzBW,EAAI,EACFC,EAASnB,EAAKmB,OACd5D,EAAQyC,EAAK,GAAGmB,OAEtB,KAAOF,EAAME,OAAS,GAAG,CAErB,IADA,IAAMC,EAAIH,EAAME,OACP5C,EAAI,EAAGA,EAAI6C,EAAG7C,IAGnB,IAHyB,IAAD,EACT0C,EAAMI,QADG,mBACjBf,EADiB,KACdC,EADc,KAGfe,EAAIC,KAAKC,IAAI,EAAGlB,EAAI,GAAIgB,EAAIC,KAAKE,IAAIN,EAAQb,EAAI,KAAMgB,EAC5D,IAAK,IAAII,EAAIH,KAAKC,IAAI,EAAGjB,EAAI,GAAImB,EAAIH,KAAKE,IAAIlE,EAAOgD,EAAI,KAAMmB,EACtD1B,EAAKsB,GAAGI,GAAGrC,SAAUW,EAAKsB,GAAGI,GAAGvC,WAAca,EAAKsB,GAAGI,GAAGjC,UAC1DO,EAAKsB,GAAGI,GAAGvC,WAAY,EACY,IAAhCa,EAAKsB,GAAGI,GAAGpC,kBACV2B,EAAMU,KAAK,CAACL,EAAGI,KAQnCE,YAAW,SAACnB,GACRR,EAAQQ,KACH,GAANS,IAAUlB,IA7CT6B,CAAiBpB,EAASxB,GAG1BgB,EAAQQ,GAGTG,EAAOH,GAAU,CAChB,IAAMqB,EAAerB,EAAQnC,KAAI,SAAAoC,GAAC,OAAIA,EAAEpC,KAAI,SAAAqC,GAAC,kCACtCA,GADsC,IAEzClB,QAASkB,EAAEtB,eAGfY,EAAQ6B,GACRpE,EAAMmD,WAAW3D,KAoC7B,OACI8C,EAAK1B,KAAI,SAACoC,EAAGY,GAAJ,OAAU,qBAAazD,UAAU,MAAvB,SACd6C,EAAEpC,KAAI,SAACqC,EAAGe,GAAJ,OAAU,cAAC1C,EAAD,CAEbE,KAAMyB,EACNhB,gBAAiBA,EACjBE,iBAAkBA,GAHb6B,OAFgBJ,MC/G9B,SAASS,EAAWZ,EAAQ5D,EAAOC,GAoEtC,OAzBA,SAA6BwE,GAEzB,SAASC,EAAsB3B,EAAGC,GAG9B,IAFA,IAAI2B,EAAQ,EAEHZ,EAAIC,KAAKC,IAAI,EAAGlB,EAAI,GAAIgB,EAAIC,KAAKE,IAAIO,EAAMb,OAAQb,EAAI,KAAMgB,EAClE,IAAK,IAAII,EAAIH,KAAKC,IAAI,EAAGjB,EAAI,GAAImB,EAAIH,KAAKE,IAAIO,EAAMV,GAAGH,OAAQZ,EAAI,KAAMmB,EACjEM,EAAMV,GAAGI,GAAGrC,QACZ6C,IAKZ,OAAOA,EAGX,IAAK,IAAIZ,EAAI,EAAGA,EAAIU,EAAMb,SAAUG,EAChC,IAAK,IAAII,EAAI,EAAGA,EAAIM,EAAMV,GAAGH,SAAUO,EACnCM,EAAMV,GAAGI,GAAGpC,iBAAmB2C,EAAsBX,EAAGI,GAIhE,OAAOM,EAGJG,CAxCP,SAAmBnC,GAGf,IAFA,IAAMoB,EAAIpB,EAAKmB,OACTiB,EAAIpC,EAAK,GAAGmB,OACTG,EAAI,EAAGA,EAAIF,IAAKE,EACrB,IAAK,IAAII,EAAI,EAAGA,EAAIU,IAAKV,EAAG,CACxB,IAAMW,EAAOd,KAAKe,MAAMf,KAAKgB,SAAWnB,EAAIgB,GACtCI,EAAKjB,KAAKe,MAAMD,EAAOD,GACvBK,EAAKJ,EAAOD,EAHM,EAIK,CAACpC,EAAKwC,GAAIC,GAAKzC,EAAKsB,GAAGI,IAAnD1B,EAAKsB,GAAGI,GAJe,KAIX1B,EAAKwC,GAAIC,GAJE,KAQhC,OAAOzC,EA4BgB0C,CApD3B,SAAkB1C,EAAMxC,GACpB,IAAK,IAAI8D,EAAI,EAAGA,EAAItB,EAAKmB,QAAU3D,IAAc8D,EAC7C,IAAK,IAAII,EAAI,EAAGA,EAAI1B,EAAKsB,GAAGH,QAAU3D,IAAckE,IAAKlE,EACrDwC,EAAKsB,GAAGI,GAAK,CACTrC,QAAQ,GAKpB,OAAOW,EA2C0B2C,CAlErC,SAAqBxB,EAAQ5D,GAEzB,IADA,IAAIyC,EAAO,GACFsB,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7BtB,EAAKsB,GAAK,GACV,IAAK,IAAII,EAAI,EAAGA,EAAInE,EAAOmE,IACvB1B,EAAKsB,GAAGI,GAAK,CACTrC,QAAQ,GAKpB,OAAOW,EAuDmC4C,CAAYzB,EAAQ5D,GAAQC,KACrEc,KAAI,SAACoC,EAAGY,GAAJ,OAAUZ,EAAEpC,KAAI,SAACqC,EAAGe,GAAJ,MAAW,CAC5BvC,WAAW,EACXE,OAAQsB,EAAEtB,OACVC,iBAAkBqB,EAAErB,iBACpBgB,EAAGgB,EACHf,EAAGmB,SCOAmB,MAvEf,WAAwB,IAAD,EACO9C,mBAAS5C,EAAO,IADvB,mBACZkB,EADY,KACLyE,EADK,OAGe/C,mBAAS1B,EAAMb,YAH9B,mBAGZQ,EAHY,KAGD+E,EAHC,OAIiBhD,mBAAS7C,GAJ1B,mBAIZwB,EAJY,KAIAsE,EAJA,OAKKjD,mBAASgC,EAAW1D,EAAMf,OAAQe,EAAMd,MAAOc,EAAMb,aAL1D,mBAKZwC,EALY,KAKNC,EALM,OAMWF,oBAAS,GANpB,mBAMZG,EANY,KAMHC,EANG,OAOiBJ,oBAAS,GAP1B,mBAOZlB,EAPY,KAOAoE,EAPA,KASbnE,ECjBH,SAAkBoE,EAAUC,GAAQ,IAAD,EACZpD,mBAAS,GADG,mBAC/BjB,EAD+B,KACxBsE,EADwB,KAoBtC,OAjBAC,qBAAU,WACN,IAAIC,EAAW,KAaf,OAZIJ,IAAaI,EACbA,EAAW1B,YAAW,WAClBwB,GAAS,SAAAtE,GAAK,OAAIA,EAAQ,OAC3B,KACIwE,GACPC,aAAaD,GAGbH,GACAC,EAAS,GAGN,kBAAMG,aAAaD,MAC3B,CAACxE,EAAOoE,EAAUC,IAEdrE,EDHO0E,CAAS9E,IAAexB,EAAsBwB,IAAexB,GAI3E,SAASiG,IACLH,EAAc9F,GACd6F,EAAa1E,EAAMb,YACnByC,EAAQ8B,EAAW1D,EAAMf,OAAQe,EAAMd,MAAOc,EAAMb,aACpD2C,GAAW,SAAAD,GAAO,OAAKA,KA+B3B,OArCAmD,oBAAUF,EAAO,CAAC9E,IAsCd,sBAAKR,UAAU,cAAf,UACI,cAACE,EAAD,CACIC,UAAWA,EACXc,MAAOA,EACPJ,WAAYA,EACZL,MAAOA,EAAMjB,GACbe,mBAbZ,SAA4BsF,GACrBA,IAAepF,GACdyE,EAAS3F,EAAOsG,KAYZ5E,WAAYA,EACZD,aAAcuE,IAClB,qBAAKtF,UAAU,OAAO6F,YAAa,kBAAMT,GAAc,IAAOU,UAAW,kBAAMV,GAAc,IAAQW,aAAc,kBAAMX,GAAc,IAAvI,SACI,cAACnD,EAAD,CACII,QAASA,EACTF,KAAMA,EACNQ,SAzCS9B,IAAexB,GAAoBwB,IAAexB,EA0C3D4D,eAxChB,SAAwBrB,GAEhBsD,EADDtD,EACczB,EAAU,EAGVA,EAAU,IAoCfqC,eAhChB,WACO3B,IAAexB,GACd8F,EAAc9F,IA+BN2D,WA3BhB,SAAoBpC,GAChBuE,EAAcvE,YEtCPoF,MARf,WACE,OACE,qBAAKhG,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBc,QAAQC,O","file":"static/js/main.70215dec.chunk.js","sourcesContent":["\nexport const gameStatuses = {\n    notStarted: \"notStarted\",\n    running: \"running\",\n    won: \"won\",\n    lost: \"lost\"\n}\n\nexport const levels = [\n    { id: 0, text: \"Beginner\", height: 10, width: 10, minesCount: 10 },\n    { id: 1, text: \"Intermediate\", height: 16, width: 16, minesCount: 44 },\n    { id: 2, text: \"Expert\", height: 30, width: 30, minesCount: 100 },\n]","import React from 'react';\nimport './Scoreboard.component.css';\n\n\nexport function DigitalCounter(props) {\n    const str = \"\" + props.value\n    return (<div className=\"digital-counter\">{str.padStart(3, '0')}</div>);\n}\n\nexport default DigitalCounter;","import React from 'react';\nimport { gameStatuses, levels } from '../constants';\nimport { DigitalCounter } from './DigitalCounter';\n\n\n\nexport function Scoreboard(props) {\n    return (\n        <div className=\"scoreboard\">\n            <DigitalCounter value={props.minesLeft} />\n            <div>\n                <div className=\"select-wrap\">\n                    <select onChange={(e) => props.levelChangeHandler(e.target.value)} value={props.level}>\n                        { levels.map(l => (<option key={l.id} value={l.id}> {l.text} </option>)) }\n                    </select>\n                </div>\n                <GameStatus status={props.gameStatus} onClickHandler={props.resetHandler} isClicking={props.isClicking} />       \n            </div>\n            <DigitalCounter value={props.timer} />\n        </div>\n    );\n}\n\nexport default Scoreboard;\n\nexport function GameStatus(props) {\n    function getStatusEmoji(status) {\n        if (status === gameStatuses.lost) {\n            return '😞';\n        } else if (status === gameStatuses.won) {\n            return '😎';\n        } else {\n            return '😊'\n        }\n    }\n\n    return (\n        <button className=\"reset\" onClick={props.onClickHandler}>\n            { props.isClicking ? '😲' : getStatusEmoji(props.status) }\n        </button>\n    );\n}\n","import React from 'react';\n\n\nexport function Cell(props) {\n    const cell = props.data.isCovered ? 'cell' : 'uncovered-cell';\n    const number = !props.data.isCovered && !props.isMine ? `cell-${props.data.neighboringMines}` : '';\n    const mine = !props.data.isCovered && props.isMine ? 'cell-mine' : '';\n    const content = props.data.isCovered ? \n        (props.data.flagged ? '🚩' : '') : (props.data.isMine ? '💣' : props.data.neighboringMines > 0 ? props.data.neighboringMines : ''); \n    const clickedMine = props.data.clickedMine ? 'clicked-mine' : ''\n\n    return (\n        <button \n            className={`${cell} ${number} ${mine} ${clickedMine}`}\n            onClick={() => props.handleLeftClick(props.data)}\n            onContextMenu={(e) =>props.handleRightClick(props.data, e)}>\n                { content }\n        </button>\n    );\n}\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport { Cell } from './Cell';\nimport { gameStatuses } from '../constants';\n\n\nexport function MinesweeperGrid(props) {\n    const [grid, setGrid] = useState(props.grid);\n    const [refresh, setRefresh] = useState(props.refresh);\n\n    if(refresh !== props.refresh) {\n        setRefresh(props.refresh);\n        setGrid(props.grid);\n    }\n\n    function handleRightClick(cell, e) {\n        e.preventDefault();\n        props.cellGotClicked();\n\n        const [x, y] = [cell.x, cell.y];\n\n        if (!grid[x][y].isCovered || props.gameOver)\n            return;\n\n        const newGrid = grid.map(r => r.map(c => ({...c})));\n\n        newGrid[x][y].flagged = !newGrid[x][y].flagged;\n        \n        if(hasWon(newGrid)) {\n            props.setGameEnd(gameStatuses.won);\n        }\n\n        setGrid(newGrid);\n        props.cellGotFlagged(newGrid[x][y].flagged);\n    }\n\n    const hasWon = (grid) => grid.reduce((a, r) => a && r.reduce((a, c) => a && (c.isMine || !c.isCovered), true), true);\n\n    function handleLeftClick(cell) {\n        const [x, y] = [cell.x, cell.y];\n        props.cellGotClicked();\n\n        if (!grid[x][y].isCovered || grid[x][y].flagged || props.gameOver)\n            return;\n\n        if (grid[x][y].isMine) {\n            const newGrid = grid.map(r => r.map(c => ({\n                ...c,\n                isCovered: c.isMine ? false : c.isCovered\n            })));\n            newGrid[x][y].clickedMine = true;\n\n            setGrid(newGrid);\n            props.setGameEnd(gameStatuses.lost);\n        }\n        else  {\n            const newGrid = grid.map(r => r.map(c => ({\n                ...c\n            })));\n            newGrid[x][y].isCovered = false;\n            \n            if (grid[x][y].neighboringMines === 0) {\n                uncoverEmptyGrid(newGrid, cell);\n            }\n            else {\n                setGrid(newGrid);\n            }\n\n            if(hasWon(newGrid)) {\n                const flagsSetGrid = newGrid.map(r => r.map(c => ({\n                    ...c,\n                    flagged: c.isMine\n                })));\n                \n                setGrid(flagsSetGrid);\n                props.setGameEnd(gameStatuses.won);\n            }\n        }\n    }\n\n    // BFS\n    function uncoverEmptyGrid(grid, cell) {\n        const queue = [[cell.x, cell.y]];\n        let k = 0;\n        const length = grid.length;\n        const width = grid[0].length;\n\n        while (queue.length > 0) {\n            const n = queue.length;\n            for (let l = 0; l < n; l++) {\n                const [x, y] = queue.shift();\n\n                for (let i = Math.max(0, x - 1); i < Math.min(length, x + 2); ++i) {\n                    for (let j = Math.max(0, y - 1); j < Math.min(width, y + 2); ++j) {\n                        if (!grid[i][j].isMine && grid[i][j].isCovered && !grid[i][j].flagged) {\n                            grid[i][j].isCovered = false;\n                            if(grid[i][j].neighboringMines === 0) {\n                                queue.push([i, j]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // update after each breadth search cycle for animation\n            setTimeout((newGrid) => {\n                setGrid(newGrid);\n            }, k++ * 50, grid);\n        }\n    }\n\n    return (\n        grid.map((r, i) => <div key={i} className=\"row\">\n            {r.map((c, j) => <Cell\n                key={j}\n                data={c}\n                handleLeftClick={handleLeftClick}\n                handleRightClick={handleRightClick} />)}\n        </div>\n        )\n    );\n}\n","export function getNewGrid(length, width, minesCount) {\n\n    function getNewCells(length, width) {\n        let grid = [];\n        for (var i = 0; i < length; i++) {\n            grid[i] = [];\n            for (var j = 0; j < width; j++) {\n                grid[i][j] = {\n                    isMine: false\n                };\n            }\n        }\n\n        return grid;\n    }\n\n    function addMines(grid, minesCount) {\n        for (var i = 0; i < grid.length && minesCount; ++i) {\n            for (var j = 0; j < grid[i].length && minesCount; ++j, --minesCount) {\n                grid[i][j] = {\n                    isMine: true\n                };\n            }\n        }\n\n        return grid;\n    }\n\n    function randomize(grid) {\n        const n = grid.length;\n        const m = grid[0].length;\n        for (let i = 0; i < n; ++i) {\n            for (let j = 0; j < m; ++j) {\n                const rand = Math.floor(Math.random() * n * m);\n                const i1 = Math.floor(rand / m);\n                const j1 = rand % m;\n                [grid[i][j], grid[i1][j1]] = [grid[i1][j1], grid[i][j]];\n            }\n        }\n\n        return grid;\n    }\n\n    function setneighboringMines(mines) {\n\n        function calcNneighboringMines(x, y) {\n            var count = 0;\n\n            for (var i = Math.max(0, x - 1); i < Math.min(mines.length, x + 2); ++i) {\n                for (var j = Math.max(0, y - 1); j < Math.min(mines[i].length, y + 2); ++j) {\n                    if (mines[i][j].isMine) {\n                        count++;\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        for (var i = 0; i < mines.length; ++i) {\n            for (var j = 0; j < mines[i].length; ++j) {\n                mines[i][j].neighboringMines = calcNneighboringMines(i, j);\n            }\n        }\n\n        return mines;\n    }\n\n    return setneighboringMines(randomize(addMines(getNewCells(length, width), minesCount)))\n        .map((r, i) => r.map((c, j) => ({\n            isCovered: true,\n            isMine: c.isMine,\n            neighboringMines: c.neighboringMines,\n            x: i,\n            y: j,\n        })));\n}\n","import React, { useEffect, useState } from 'react';\nimport { Scoreboard } from './Scoreboard';\nimport './Cell.component.css';\nimport './Minesweeper.component.css';\nimport { MinesweeperGrid } from './MinesweeperGrid';\nimport { getNewGrid } from './getNewGrid';\nimport { gameStatuses, levels } from '../constants';\nimport { useTimer } from '../hooks/useTimer';\n\n\nfunction Minesweeper() {\n    const [level, setLevel] = useState(levels[0]);\n\n    const [minesLeft, setMinesLeft] = useState(level.minesCount);\n    const [gameStatus, setGameStatus] = useState(gameStatuses.notStarted);\n    const [grid, setGrid] = useState(getNewGrid(level.height, level.width, level.minesCount));\n    const [refresh, setRefresh] = useState(false);\n    const [isClicking, setIsClicking] = useState(false);\n\n    const timer = useTimer(gameStatus === gameStatuses.running, gameStatus === gameStatuses.notStarted);\n\n    useEffect(reset, [level] );\n\n    function reset() {\n        setGameStatus(gameStatuses.notStarted);\n        setMinesLeft(level.minesCount);\n        setGrid(getNewGrid(level.height, level.width, level.minesCount));\n        setRefresh(refresh => !refresh);\n    }\n    \n    \n    const isGameOver = () => gameStatus === gameStatuses.won || gameStatus === gameStatuses.lost;\n\n    function cellGotFlagged(flagged) {\n        if(flagged) {\n            setMinesLeft(minesLeft-1);\n        }\n        else {\n            setMinesLeft(minesLeft+1);\n        }\n    }\n    \n    function cellGotClicked() {\n        if(gameStatus === gameStatuses.notStarted) {\n            setGameStatus(gameStatuses.running);\n        }\n    }\n\n    function setGameEnd(status) {\n        setGameStatus(status);\n    }\n\n    function levelChangeHandler(newLevelId) {\n        if(newLevelId !== level) {\n            setLevel(levels[newLevelId]);\n        }\n    }\n\n    return (\n        <div className=\"minesweeper\">\n            <Scoreboard \n                minesLeft={minesLeft}\n                timer={timer}\n                gameStatus={gameStatus}\n                level={level.id}\n                levelChangeHandler={levelChangeHandler}\n                isClicking={isClicking}\n                resetHandler={reset} />\n            <div className=\"grid\" onMouseDown={() => setIsClicking(true)} onMouseUp={() => setIsClicking(false)} onMouseLeave={() => setIsClicking(false)}>\n                <MinesweeperGrid\n                    refresh={refresh}\n                    grid={grid}\n                    gameOver={isGameOver()}\n                    cellGotFlagged={cellGotFlagged}\n                    cellGotClicked={cellGotClicked}\n                    setGameEnd={setGameEnd} />\n            </div>\n        </div>\n    );\n}\n\nexport default Minesweeper;\n\n","import { useState, useEffect } from 'react';\n\nexport function useTimer(isActive, reset) {\n    const [timer, setTimer] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive && !interval) {\n            interval = setTimeout(() => {\n                setTimer(timer => timer + 1);\n            }, 1000);\n        } else if (interval) {\n            clearTimeout(interval);\n        }\n\n        if (reset) {\n            setTimer(0);\n        }\n\n        return () => clearTimeout(interval);\n    }, [timer, isActive, reset]);\n\n    return timer;\n}\n","import './App.css';\nimport Minesweeper from './components/Minesweeper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minesweeper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}